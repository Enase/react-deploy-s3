import AWS from 'aws-sdk';
import getValidationDomain from './getValidationDomain';
import { Spinner } from 'cli-spinner';

const sleep = function (timeout) {
  return new Promise(function (resolve) {
    setTimeout(resolve, timeout);
  });
};

const getStatus = async function (CertificateArn) {
  const acm = new AWS.ACM();

  const { Certificate } = await acm.describeCertificate({
    CertificateArn
  }).promise();

  return {
    status: Certificate.Status,
    domainValidation: Certificate.DomainValidationOptions
  };
};

const checkReady = async function (arn) {
  while (true) {
    await sleep(2000);
    const { status } = await getStatus(arn);
    if (status === 'ISSUED') return;
  }
};

export default async function (aliases) {
  const acm = new AWS.ACM();
  const domains = aliases.map(alias => alias); // to clone it
  const validationOptions = domains.map(domain => {
    return {
      DomainName: domain,
      ValidationDomain: getValidationDomain(domain)
    };
  });
  const mainDomain = domains[0];
  domains.splice(0, 1);

  console.log('Requesting certificate...');

  const { CertificateArn } = await acm.requestCertificate({
    DomainName: mainDomain,
    IdempotencyToken: `app_ssl_request_${String(Number(new Date()))}`,
    DomainValidationOptions: validationOptions,
    SubjectAlternativeNames: domains.length ? domains : undefined
  }).promise();

  await acm.addTagsToCertificate({
    CertificateArn,
    Tags: [
      { Key: 'Name', Value: `Certificate for ${mainDomain} generated by react-deploy-s3` }
    ]
  }).promise();

  console.log('Please check your email to accept the request');

  let spinner = new Spinner('%s Don\'t close me, I will wait and check when you finish...');
  spinner.setSpinnerString('⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏');
  spinner.start();

  await checkReady(CertificateArn);
  spinner.stop(true);
  console.log('Certificate is ready');

  return CertificateArn;
}
